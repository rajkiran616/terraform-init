# Resource configurations for ${account.name} (${account_id})
# Generated configurations that match existing AWS resources
# Review and adjust these configurations before importing

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

# Provider configuration for ${account.name}
provider "aws" {
  alias  = "account_${replace(lower(account.name), "-", "_")}"
  region = var.aws_region
  
  assume_role {
    role_arn = "arn:aws:iam::${account_id}:role/TerraformCrossAccountRole"
  }
  
  default_tags {
    tags = {
      Environment = "${account.environment}"
      ManagedBy   = "Terraform"
      ImportedOn  = formatdate("YYYY-MM-DD", timestamp())
    }
  }
}

# VPC Resources
%{ for vpc_id, vpc in resources.vpcs ~}
resource "aws_vpc" "vpc_${replace(vpc_id, "-", "_")}" {
  provider = aws.account_${replace(lower(account.name), "-", "_")}
  
  cidr_block           = "${vpc.cidr_block}"
  enable_dns_hostnames = true  # Adjust based on actual configuration
  enable_dns_support   = true  # Adjust based on actual configuration
  
  tags = {
%{ for key, value in vpc.tags ~}
    ${key} = "${value}"
%{ endfor ~}
  }
  
  lifecycle {
    # Prevent changes to CIDR block after import
    ignore_changes = [cidr_block]
  }
}

%{ endfor ~}

# Subnet Resources
%{ for subnet_id, subnet in resources.subnets ~}
resource "aws_subnet" "subnet_${replace(subnet_id, "-", "_")}" {
  provider = aws.account_${replace(lower(account.name), "-", "_")}
  
  vpc_id            = aws_vpc.vpc_${replace(subnet.vpc_id, "-", "_")}.id
  cidr_block        = "${subnet.cidr_block}"
  availability_zone = "${subnet.availability_zone}"
  
  # Set based on subnet type detected
  map_public_ip_on_launch = ${subnet.type == "public" ? "true" : "false"}
  
  tags = {
%{ for key, value in subnet.tags ~}
    ${key} = "${value}"
%{ endfor ~}
%{ if subnet.name == "" ~}
    Name = "${subnet.type}-subnet-${subnet.availability_zone}"
%{ endif ~}
  }
  
  lifecycle {
    ignore_changes = [cidr_block, availability_zone]
  }
}

%{ endfor ~}

# Security Group Resources
%{ for sg_id, sg in resources.security_groups ~}
resource "aws_security_group" "sg_${replace(sg_id, "-", "_")}" {
  provider = aws.account_${replace(lower(account.name), "-", "_")}
  
  name_prefix = "${sg.name}-"
  description = "${sg.description}"
  vpc_id      = aws_vpc.vpc_${replace(sg.vpc_id, "-", "_")}.id
  
  # Note: Ingress and egress rules need to be added manually
  # Run 'aws ec2 describe-security-groups --group-ids ${sg_id}' to get rules
  
  tags = {
%{ for key, value in sg.tags ~}
    ${key} = "${value}"
%{ endfor ~}
  }
  
  lifecycle {
    create_before_destroy = true
    # You may want to ignore changes to rules if they're managed elsewhere
    # ignore_changes = [ingress, egress]
  }
}

%{ endfor ~}

# EC2 Instance Resources
%{ for instance_id, instance in resources.ec2_instances ~}
resource "aws_instance" "instance_${replace(instance_id, "-", "_")}" {
  provider = aws.account_${replace(lower(account.name), "-", "_")}
  
  ami           = "${instance.ami}"
  instance_type = "${instance.instance_type}"
  subnet_id     = aws_subnet.subnet_${replace(instance.subnet_id, "-", "_")}.id
  
  # Note: Many instance attributes cannot be imported and may need to be ignored
  # Add specific configurations based on your instance setup
  
  tags = {
%{ for key, value in instance.tags ~}
    ${key} = "${value}"
%{ endfor ~}
%{ if instance.name == "" ~}
    Name = "imported-instance-${instance_id}"
%{ endif ~}
  }
  
  lifecycle {
    # Ignore changes to attributes that can't be modified after creation
    ignore_changes = [
      ami,
      instance_type,
      subnet_id,
      vpc_security_group_ids,
      key_name,
      # Add more attributes as needed
    ]
  }
}

%{ endfor ~}

# Variables used in this configuration
variable "aws_region" {
  description = "AWS region"
  type        = string
  default     = "us-east-1"
}

# Outputs for reference
%{ if length(resources.vpcs) > 0 ~}
output "imported_vpcs" {
  description = "Imported VPC details"
  value = {
%{ for vpc_id, vpc in resources.vpcs ~}
    "${vpc_id}" = {
      id         = aws_vpc.vpc_${replace(vpc_id, "-", "_")}.id
      cidr_block = aws_vpc.vpc_${replace(vpc_id, "-", "_")}.cidr_block
    }
%{ endfor ~}
  }
}
%{ endif ~}

%{ if length(resources.subnets) > 0 ~}
output "imported_subnets" {
  description = "Imported subnet details"
  value = {
%{ for subnet_id, subnet in resources.subnets ~}
    "${subnet_id}" = {
      id         = aws_subnet.subnet_${replace(subnet_id, "-", "_")}.id
      cidr_block = aws_subnet.subnet_${replace(subnet_id, "-", "_")}.cidr_block
      type       = "${subnet.type}"
    }
%{ endfor ~}
  }
}
%{ endif ~}