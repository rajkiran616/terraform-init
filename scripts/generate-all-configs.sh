#!/bin/bash\n# Master Script to Generate All Module Configurations\n# This script orchestrates the generation of configurations for all modules\n\nset -e\n\n# Configuration\nOUTPUT_DIR=\"generated-configs\"\nREGION=\"\"\nVPC_ID=\"\"\nFILTER_PATTERN=\"\"\nEXCLUDE_PATTERN=\"\"\nDRY_RUN=false\nINCLUDE_DEFAULTS=false\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nPURPLE='\\033[0;35m'\nNC='\\033[0m' # No Color\n\n# Logging functions\nlog_info() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nlog_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nlog_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nlog_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\nlog_header() {\n    echo -e \"${PURPLE}[HEADER]${NC} $1\"\n}\n\n# Usage function\nusage() {\n    cat << EOF\nUsage: $0 [OPTIONS]\n\nGenerate Terraform module configurations for all modules from existing AWS resources.\n\nOptions:\n    -d, --output-dir DIR    Output directory for generated files (default: generated-configs)\n    -r, --region REGION     AWS region to scan (default: current region)\n    -v, --vpc-id VPC_ID     Specific VPC ID to scan (applies to VPC and SG modules)\n    -f, --filter PATTERN    Filter resources by name pattern\n    -e, --exclude PATTERN   Exclude resources by name pattern\n    --include-defaults      Include default resources (VPCs, SGs)\n    --iam-only             Generate only IAM configuration\n    --vpc-only             Generate only VPC configuration\n    --sg-only              Generate only Security Group configuration\n    --dry-run              Show what would be generated without creating files\n    -h, --help             Display this help message\n\nExamples:\n    $0 -d my-configs\n    $0 --vpc-id vpc-12345678 --region us-west-2\n    $0 --filter \"prod-*\" --exclude \"*test*\"\n    $0 --iam-only --dry-run\n    $0 --include-defaults\nEOF\n}\n\n# Parse command line arguments\nOUTPUT_DIR=\"generated-configs\"\nIAM_ONLY=false\nVPC_ONLY=false\nSG_ONLY=false\n\nwhile [[ $# -gt 0 ]]; do\n    case $1 in\n        -d|--output-dir)\n            OUTPUT_DIR=\"$2\"\n            shift 2\n            ;;\n        -r|--region)\n            REGION=\"$2\"\n            shift 2\n            ;;\n        -v|--vpc-id)\n            VPC_ID=\"$2\"\n            shift 2\n            ;;\n        -f|--filter)\n            FILTER_PATTERN=\"$2\"\n            shift 2\n            ;;\n        -e|--exclude)\n            EXCLUDE_PATTERN=\"$2\"\n            shift 2\n            ;;\n        --include-defaults)\n            INCLUDE_DEFAULTS=true\n            shift\n            ;;\n        --iam-only)\n            IAM_ONLY=true\n            shift\n            ;;\n        --vpc-only)\n            VPC_ONLY=true\n            shift\n            ;;\n        --sg-only)\n            SG_ONLY=true\n            shift\n            ;;\n        --dry-run)\n            DRY_RUN=true\n            shift\n            ;;\n        -h|--help)\n            usage\n            exit 0\n            ;;\n        *)\n            log_error \"Unknown option: $1\"\n            usage\n            exit 1\n            ;;\n    esac\ndone\n\n# Get script directory\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n\n# Validate environment\nvalidate_environment() {\n    log_info \"Validating environment...\"\n    \n    # Check AWS CLI\n    if ! command -v aws &> /dev/null; then\n        log_error \"AWS CLI not found. Please install and configure AWS CLI.\"\n        exit 1\n    fi\n    \n    # Check AWS credentials\n    if ! aws sts get-caller-identity &> /dev/null; then\n        log_error \"AWS CLI not configured or no valid credentials found.\"\n        exit 1\n    fi\n    \n    # Check jq\n    if ! command -v jq &> /dev/null; then\n        log_error \"jq not found. Please install jq for JSON processing.\"\n        log_info \"On macOS: brew install jq\"\n        log_info \"On Ubuntu/Debian: apt-get install jq\"\n        exit 1\n    fi\n    \n    # Check scripts exist\n    for script in \"generate-iam-config.sh\" \"generate-vpc-config.sh\" \"generate-sg-config.sh\"; do\n        if [[ ! -f \"$SCRIPT_DIR/$script\" ]]; then\n            log_error \"Required script not found: $script\"\n            exit 1\n        fi\n        \n        if [[ ! -x \"$SCRIPT_DIR/$script\" ]]; then\n            log_warning \"Script not executable: $script, making it executable...\"\n            chmod +x \"$SCRIPT_DIR/$script\"\n        fi\n    done\n    \n    log_success \"Environment validation completed\"\n}\n\n# Get AWS account info\nget_aws_info() {\n    log_info \"Getting AWS account information...\"\n    \n    ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)\n    CURRENT_REGION=$(aws configure get region || echo \"us-east-1\")\n    \n    # Use provided region or default to current\n    REGION=${REGION:-$CURRENT_REGION}\n    \n    log_info \"AWS Account ID: $ACCOUNT_ID\"\n    log_info \"AWS Region: $REGION\"\n}\n\n# Build common arguments\nbuild_common_args() {\n    local args=\"\"\n    \n    if [[ -n \"$REGION\" ]]; then\n        args=\"$args --region $REGION\"\n    fi\n    \n    if [[ -n \"$FILTER_PATTERN\" ]]; then\n        args=\"$args --filter '$FILTER_PATTERN'\"\n    fi\n    \n    if [[ -n \"$EXCLUDE_PATTERN\" ]]; then\n        args=\"$args --exclude '$EXCLUDE_PATTERN'\"\n    fi\n    \n    if [[ \"$DRY_RUN\" == \"true\" ]]; then\n        args=\"$args --dry-run\"\n    fi\n    \n    if [[ \"$INCLUDE_DEFAULTS\" == \"true\" ]]; then\n        args=\"$args --include-default\"\n    fi\n    \n    echo \"$args\"\n}\n\n# Generate IAM configuration\ngenerate_iam_config() {\n    log_header \"Generating IAM Configuration\"\n    \n    local output_file=\"$OUTPUT_DIR/iam-config.tf\"\n    local args=\"$(build_common_args) --output $output_file\"\n    \n    log_info \"Running: $SCRIPT_DIR/generate-iam-config.sh $args\"\n    \n    if ! eval \"$SCRIPT_DIR/generate-iam-config.sh $args\"; then\n        log_error \"Failed to generate IAM configuration\"\n        return 1\n    fi\n    \n    log_success \"IAM configuration generated: $output_file\"\n}\n\n# Generate VPC configuration\ngenerate_vpc_config() {\n    log_header \"Generating VPC Configuration\"\n    \n    local output_file=\"$OUTPUT_DIR/vpc-config.tf\"\n    local args=\"$(build_common_args) --output $output_file\"\n    \n    if [[ -n \"$VPC_ID\" ]]; then\n        args=\"$args --vpc-id $VPC_ID\"\n    fi\n    \n    if [[ \"$INCLUDE_DEFAULTS\" == \"true\" ]]; then\n        args=\"$args --include-default-vpc\"\n    fi\n    \n    log_info \"Running: $SCRIPT_DIR/generate-vpc-config.sh $args\"\n    \n    if ! eval \"$SCRIPT_DIR/generate-vpc-config.sh $args\"; then\n        log_error \"Failed to generate VPC configuration\"\n        return 1\n    fi\n    \n    log_success \"VPC configuration generated: $output_file\"\n}\n\n# Generate Security Groups configuration\ngenerate_sg_config() {\n    log_header \"Generating Security Groups Configuration\"\n    \n    local output_file=\"$OUTPUT_DIR/sg-config.tf\"\n    local args=\"$(build_common_args) --output $output_file\"\n    \n    if [[ -n \"$VPC_ID\" ]]; then\n        args=\"$args --vpc-id $VPC_ID\"\n    fi\n    \n    if [[ \"$INCLUDE_DEFAULTS\" == \"true\" ]]; then\n        args=\"$args --include-default\"\n    fi\n    \n    log_info \"Running: $SCRIPT_DIR/generate-sg-config.sh $args\"\n    \n    if ! eval \"$SCRIPT_DIR/generate-sg-config.sh $args\"; then\n        log_error \"Failed to generate Security Groups configuration\"\n        return 1\n    fi\n    \n    log_success \"Security Groups configuration generated: $output_file\"\n}\n\n# Generate import commands\ngenerate_import_commands() {\n    log_header \"Generating Import Commands\"\n    \n    local import_file=\"$OUTPUT_DIR/import-commands.sh\"\n    \n    if [[ \"$DRY_RUN\" == \"true\" ]]; then\n        log_info \"Skipping import commands generation in dry-run mode\"\n        return\n    fi\n    \n    cat > \"$import_file\" << 'EOF'\n#!/bin/bash\n# Generated Import Commands\n# Run these commands to import existing resources into Terraform state\n\nset -e\n\nlog_info() {\n    echo -e \"\\033[0;34m[INFO]\\033[0m $1\"\n}\n\nlog_success() {\n    echo -e \"\\033[0;32m[SUCCESS]\\033[0m $1\"\n}\n\nlog_error() {\n    echo -e \"\\033[0;31m[ERROR]\\033[0m $1\"\n}\n\nlog_info \"Starting resource imports...\"\nlog_info \"Make sure you have the corresponding .tf files in place before running imports\"\n\n# Note: This is a template. You'll need to customize the import commands\n# based on your actual resource IDs and configuration keys.\n\nlog_info \"Import commands template generated.\"\nlog_info \"Please customize the import commands based on your actual resource IDs.\"\n\n# Example imports (customize these):\n# terraform import 'module.imported_iam.aws_iam_policy.this[\"my-policy\"]' arn:aws:iam::123456789012:policy/MyPolicy\n# terraform import 'module.imported_vpc.aws_vpc.this[\"main-vpc\"]' vpc-12345678\n# terraform import 'module.imported_security_groups.aws_security_group.this[\"web-sg\"]' sg-12345678\n\nlog_success \"Review and customize import commands, then run this script\"\nEOF\n    \n    chmod +x \"$import_file\"\n    log_success \"Import commands template generated: $import_file\"\n}\n\n# Generate summary report\ngenerate_summary() {\n    log_header \"Generation Summary\"\n    \n    local summary_file=\"$OUTPUT_DIR/generation-summary.md\"\n    \n    if [[ \"$DRY_RUN\" == \"true\" ]]; then\n        log_info \"Skipping summary generation in dry-run mode\"\n        return\n    fi\n    \n    cat > \"$summary_file\" << EOF\n# Terraform Configuration Generation Summary\n\nGenerated on: $(date)\nAWS Account ID: $ACCOUNT_ID\nAWS Region: $REGION\n$([ -n \"$VPC_ID\" ] && echo \"Target VPC ID: $VPC_ID\")\n$([ -n \"$FILTER_PATTERN\" ] && echo \"Filter Pattern: $FILTER_PATTERN\")\n$([ -n \"$EXCLUDE_PATTERN\" ] && echo \"Exclude Pattern: $EXCLUDE_PATTERN\")\nInclude Defaults: $INCLUDE_DEFAULTS\n\n## Generated Files\n\nEOF\n    \n    # Add file information\n    for file in \"$OUTPUT_DIR\"/*.tf; do\n        if [[ -f \"$file\" ]]; then\n            local filename=$(basename \"$file\")\n            local line_count=$(wc -l < \"$file\")\n            echo \"- **$filename**: $line_count lines\" >> \"$summary_file\"\n        fi\n    done\n    \n    cat >> \"$summary_file\" << EOF\n\n## Next Steps\n\n1. **Review Generated Configurations**\n   - Check each .tf file for accuracy\n   - Verify resource keys and references\n   - Adjust cross-module references if needed\n\n2. **Initialize Terraform**\n   \\`\\`\\`bash\n   terraform init\n   \\`\\`\\`\n\n3. **Import Resources**\n   - Customize and run the import commands in \\`import-commands.sh\\`\n   - Import resources one by one or in batches\n\n4. **Validate Configuration**\n   \\`\\`\\`bash\n   terraform plan\n   \\`\\`\\`\n\n5. **Apply Changes (if needed)**\n   \\`\\`\\`bash\n   terraform apply\n   \\`\\`\\`\n\n## Tips\n\n- Always review generated configurations before importing\n- Test imports in a non-production environment first\n- Use \\`terraform plan\\` to verify no unwanted changes\n- Keep backups of your existing infrastructure\nEOF\n    \n    log_success \"Summary report generated: $summary_file\"\n}\n\n# Main execution\nmain() {\n    log_header \"Terraform Multi-Module Configuration Generator\"\n    log_info \"Starting configuration generation process...\"\n    \n    # Validate environment\n    validate_environment\n    \n    # Get AWS account info\n    get_aws_info\n    \n    # Create output directory\n    if [[ \"$DRY_RUN\" != \"true\" ]]; then\n        mkdir -p \"$OUTPUT_DIR\"\n        log_info \"Output directory: $OUTPUT_DIR\"\n    else\n        log_info \"DRY RUN MODE - No files will be created\"\n    fi\n    \n    # Determine what to generate\n    local generate_all=true\n    if [[ \"$IAM_ONLY\" == \"true\" || \"$VPC_ONLY\" == \"true\" || \"$SG_ONLY\" == \"true\" ]]; then\n        generate_all=false\n    fi\n    \n    # Generate configurations\n    local failed=false\n    \n    if [[ \"$generate_all\" == \"true\" || \"$IAM_ONLY\" == \"true\" ]]; then\n        if ! generate_iam_config; then\n            failed=true\n        fi\n    fi\n    \n    if [[ \"$generate_all\" == \"true\" || \"$VPC_ONLY\" == \"true\" ]]; then\n        if ! generate_vpc_config; then\n            failed=true\n        fi\n    fi\n    \n    if [[ \"$generate_all\" == \"true\" || \"$SG_ONLY\" == \"true\" ]]; then\n        if ! generate_sg_config; then\n            failed=true\n        fi\n    fi\n    \n    if [[ \"$failed\" == \"true\" ]]; then\n        log_error \"Some configurations failed to generate\"\n        exit 1\n    fi\n    \n    # Generate additional files\n    generate_import_commands\n    generate_summary\n    \n    # Final summary\n    log_header \"Generation Complete!\"\n    \n    if [[ \"$DRY_RUN\" != \"true\" ]]; then\n        log_success \"All configurations generated successfully in: $OUTPUT_DIR\"\n        log_info \"Files generated:\"\n        \n        for file in \"$OUTPUT_DIR\"/*; do\n            if [[ -f \"$file\" ]]; then\n                echo \"  - $(basename \"$file\")\"\n            fi\n        done\n        \n        echo\n        log_info \"Next steps:\"\n        echo \"  1. Review generated configurations\"\n        echo \"  2. Customize import commands in import-commands.sh\"\n        echo \"  3. Run 'terraform init' in your project directory\"\n        echo \"  4. Import resources using the generated commands\"\n        echo \"  5. Run 'terraform plan' to verify configuration\"\n    else\n        log_info \"DRY RUN completed - review the output above\"\n    fi\n}\n\n# Run main function\nmain \"$@\""