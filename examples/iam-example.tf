# Example: Using IAM Management Module with For Each Pattern\n# This example shows how to create comprehensive IAM resources using the configuration object approach\n\nmodule \"iam_management\" {\n  source = \"../modules/iam-management\"\n\n  # IAM Policies Configuration\n  iam_policies = {\n    \"s3-read-only-policy\" = {\n      description = \"Read-only access to S3 buckets\"\n      policy_document = jsonencode({\n        Version = \"2012-10-17\"\n        Statement = [\n          {\n            Effect = \"Allow\"\n            Action = [\n              \"s3:GetObject\",\n              \"s3:GetObjectVersion\",\n              \"s3:ListBucket\"\n            ]\n            Resource = [\n              \"arn:aws:s3:::my-app-bucket/*\",\n              \"arn:aws:s3:::my-app-bucket\"\n            ]\n          }\n        ]\n      })\n      tags = {\n        Environment = \"dev\"\n        Purpose     = \"application-access\"\n      }\n    }\n    \"ec2-basic-policy\" = {\n      description = \"Basic EC2 permissions\"\n      policy_document = jsonencode({\n        Version = \"2012-10-17\"\n        Statement = [\n          {\n            Effect = \"Allow\"\n            Action = [\n              \"ec2:DescribeInstances\",\n              \"ec2:DescribeImages\",\n              \"ec2:DescribeKeyPairs\",\n              \"ec2:DescribeSecurityGroups\"\n            ]\n            Resource = \"*\"\n          }\n        ]\n      })\n      tags = {\n        Environment = \"dev\"\n        Purpose     = \"compute-access\"\n      }\n    }\n    \"cloudwatch-logs-policy\" = {\n      description = \"CloudWatch Logs write access\"\n      policy_document = jsonencode({\n        Version = \"2012-10-17\"\n        Statement = [\n          {\n            Effect = \"Allow\"\n            Action = [\n              \"logs:CreateLogGroup\",\n              \"logs:CreateLogStream\",\n              \"logs:PutLogEvents\",\n              \"logs:DescribeLogStreams\"\n            ]\n            Resource = \"arn:aws:logs:*:*:*\"\n          }\n        ]\n      })\n    }\n  }\n\n  # IAM Roles Configuration\n  iam_roles = {\n    \"web-server-role\" = {\n      description = \"Role for web server instances\"\n      assume_role_policy = jsonencode({\n        Version = \"2012-10-17\"\n        Statement = [\n          {\n            Action = \"sts:AssumeRole\"\n            Effect = \"Allow\"\n            Principal = {\n              Service = \"ec2.amazonaws.com\"\n            }\n          }\n        ]\n      })\n      max_session_duration = 3600\n      tags = {\n        Environment = \"dev\"\n        Purpose     = \"web-servers\"\n        Tier        = \"public\"\n      }\n    }\n    \"app-server-role\" = {\n      description = \"Role for application server instances\"\n      assume_role_policy = jsonencode({\n        Version = \"2012-10-17\"\n        Statement = [\n          {\n            Action = \"sts:AssumeRole\"\n            Effect = \"Allow\"\n            Principal = {\n              Service = \"ec2.amazonaws.com\"\n            }\n          }\n        ]\n      })\n      inline_policies = [\n        {\n          name = \"inline-s3-access\"\n          policy = jsonencode({\n            Version = \"2012-10-17\"\n            Statement = [\n              {\n                Effect = \"Allow\"\n                Action = \"s3:GetObject\"\n                Resource = \"arn:aws:s3:::my-config-bucket/*\"\n              }\n            ]\n          })\n        }\n      ]\n      tags = {\n        Environment = \"dev\"\n        Purpose     = \"application-servers\"\n        Tier        = \"private\"\n      }\n    }\n    \"lambda-execution-role\" = {\n      description = \"Role for Lambda functions\"\n      assume_role_policy = jsonencode({\n        Version = \"2012-10-17\"\n        Statement = [\n          {\n            Action = \"sts:AssumeRole\"\n            Effect = \"Allow\"\n            Principal = {\n              Service = \"lambda.amazonaws.com\"\n            }\n          }\n        ]\n      })\n      tags = {\n        Environment = \"dev\"\n        Purpose     = \"lambda-functions\"\n      }\n    }\n    \"cross-account-role\" = {\n      description = \"Role for cross-account access\"\n      assume_role_policy = jsonencode({\n        Version = \"2012-10-17\"\n        Statement = [\n          {\n            Action = \"sts:AssumeRole\"\n            Effect = \"Allow\"\n            Principal = {\n              AWS = \"arn:aws:iam::PRODUCTION-ACCOUNT-ID:root\"\n            }\n            Condition = {\n              StringEquals = {\n                \"sts:ExternalId\" = \"unique-external-id-123\"\n              }\n            }\n          }\n        ]\n      })\n      max_session_duration = 7200\n      tags = {\n        Environment = \"dev\"\n        Purpose     = \"cross-account-access\"\n      }\n    }\n  }\n\n  # IAM Users Configuration\n  iam_users = {\n    \"service-user-1\" = {\n      description = \"Service user for application integrations\"\n      path        = \"/service-users/\"\n      tags = {\n        Environment = \"dev\"\n        Purpose     = \"service-integration\"\n        Team        = \"backend-team\"\n      }\n    }\n    \"developer-user\" = {\n      description = \"Developer access user\"\n      path        = \"/developers/\"\n      tags = {\n        Environment = \"dev\"\n        Purpose     = \"development\"\n        Team        = \"development-team\"\n      }\n    }\n    \"readonly-user\" = {\n      description = \"Read-only access user\"\n      path        = \"/readonly/\"\n      force_destroy = true\n      tags = {\n        Environment = \"dev\"\n        Purpose     = \"monitoring\"\n      }\n    }\n  }\n\n  # IAM Groups Configuration\n  iam_groups = {\n    \"developers\" = {\n      path = \"/teams/\"\n    }\n    \"operators\" = {\n      path = \"/teams/\"\n    }\n    \"readonly-users\" = {\n      path = \"/access-levels/\"\n    }\n  }\n\n  # IAM Instance Profiles Configuration\n  iam_instance_profiles = {\n    \"web-server-profile\" = {\n      role_key = \"web-server-role\"\n      tags = {\n        Environment = \"dev\"\n        Purpose     = \"web-servers\"\n      }\n    }\n    \"app-server-profile\" = {\n      role_key = \"app-server-role\"\n      tags = {\n        Environment = \"dev\"\n        Purpose     = \"application-servers\"\n      }\n    }\n  }\n\n  # IAM Role Policy Attachments Configuration\n  iam_role_policy_attachments = {\n    \"web-server-s3-access\" = {\n      role_key   = \"web-server-role\"\n      policy_key = \"s3-read-only-policy\"\n    }\n    \"web-server-ec2-access\" = {\n      role_key   = \"web-server-role\"\n      policy_key = \"ec2-basic-policy\"\n    }\n    \"web-server-logs-access\" = {\n      role_key   = \"web-server-role\"\n      policy_key = \"cloudwatch-logs-policy\"\n    }\n    \"app-server-s3-access\" = {\n      role_key   = \"app-server-role\"\n      policy_key = \"s3-read-only-policy\"\n    }\n    \"app-server-logs-access\" = {\n      role_key   = \"app-server-role\"\n      policy_key = \"cloudwatch-logs-policy\"\n    }\n    \"lambda-basic-execution\" = {\n      role_key   = \"lambda-execution-role\"\n      policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\n    }\n    \"lambda-vpc-access\" = {\n      role_key   = \"lambda-execution-role\"\n      policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\"\n    }\n  }\n\n  # IAM User Policy Attachments Configuration\n  iam_user_policy_attachments = {\n    \"service-user-s3-access\" = {\n      user_key   = \"service-user-1\"\n      policy_key = \"s3-read-only-policy\"\n    }\n    \"developer-power-user\" = {\n      user_key   = \"developer-user\"\n      policy_arn = \"arn:aws:iam::aws:policy/PowerUserAccess\"\n    }\n    \"readonly-user-access\" = {\n      user_key   = \"readonly-user\"\n      policy_arn = \"arn:aws:iam::aws:policy/ReadOnlyAccess\"\n    }\n  }\n\n  # IAM Group Policy Attachments Configuration\n  iam_group_policy_attachments = {\n    \"developers-power-access\" = {\n      group_key  = \"developers\"\n      policy_arn = \"arn:aws:iam::aws:policy/PowerUserAccess\"\n    }\n    \"developers-s3-access\" = {\n      group_key  = \"developers\"\n      policy_key = \"s3-read-only-policy\"\n    }\n    \"operators-admin-access\" = {\n      group_key  = \"operators\"\n      policy_arn = \"arn:aws:iam::aws:policy/AdministratorAccess\"\n    }\n    \"readonly-group-access\" = {\n      group_key  = \"readonly-users\"\n      policy_arn = \"arn:aws:iam::aws:policy/ReadOnlyAccess\"\n    }\n  }\n\n  # IAM Group Memberships Configuration\n  iam_group_memberships = {\n    \"developers-membership\" = {\n      group_key = \"developers\"\n      users     = [\"developer-user\"]\n    }\n    \"readonly-membership\" = {\n      group_key = \"readonly-users\"\n      users     = [\"readonly-user\", \"service-user-1\"]\n    }\n  }\n\n  # IAM Access Keys Configuration (use sparingly)\n  iam_access_keys = {\n    \"service-user-1-key\" = {\n      user_key = \"service-user-1\"\n      status   = \"Active\"\n    }\n  }\n\n  # IAM User Login Profiles (Console Access)\n  # Note: Requires PGP key for password encryption\n  # iam_user_login_profiles = {\n  #   \"developer-console-access\" = {\n  #     user_key = \"developer-user\"\n  #     pgp_key  = \"keybase:username\" # or PGP key content\n  #     password_length = 20\n  #     password_reset_required = true\n  #   }\n  # }\n\n  # IAM OIDC Providers (for GitHub Actions, etc.)\n  iam_oidc_providers = {\n    \"github-actions-oidc\" = {\n      url             = \"https://token.actions.githubusercontent.com\"\n      client_id_list  = [\"sts.amazonaws.com\"]\n      thumbprint_list = [\"6938fd4d98bab03faadb97b34396831e3780aea1\"] # GitHub's thumbprint\n      tags = {\n        Environment = \"dev\"\n        Purpose     = \"github-actions\"\n      }\n    }\n  }\n\n  # Common tags applied to all resources\n  common_tags = {\n    Project     = \"terraform-multi-account-organization\"\n    ManagedBy   = \"terraform\"\n    Owner       = \"infrastructure-team\"\n    Environment = \"dev\"\n  }\n}\n\n# Additional Role for GitHub Actions (using OIDC)\nmodule \"github_actions_iam\" {\n  source = \"../modules/iam-management\"\n\n  iam_roles = {\n    \"github-actions-role\" = {\n      description = \"Role for GitHub Actions workflows\"\n      assume_role_policy = jsonencode({\n        Version = \"2012-10-17\"\n        Statement = [\n          {\n            Effect = \"Allow\"\n            Principal = {\n              Federated = module.iam_management.iam_oidc_providers[\"github-actions-oidc\"].arn\n            }\n            Action = \"sts:AssumeRoleWithWebIdentity\"\n            Condition = {\n              StringEquals = {\n                \"token.actions.githubusercontent.com:aud\" = \"sts.amazonaws.com\"\n              }\n              StringLike = {\n                \"token.actions.githubusercontent.com:sub\" = \"repo:my-org/my-repo:*\"\n              }\n            }\n          }\n        ]\n      })\n      tags = {\n        Environment = \"dev\"\n        Purpose     = \"ci-cd\"\n      }\n    }\n  }\n\n  iam_role_policy_attachments = {\n    \"github-actions-s3-deploy\" = {\n      role_key = \"github-actions-role\"\n      policy_arn = \"arn:aws:iam::aws:policy/AmazonS3FullAccess\"\n    }\n  }\n\n  common_tags = {\n    Project     = \"terraform-multi-account-organization\"\n    ManagedBy   = \"terraform\"\n    Owner       = \"infrastructure-team\"\n    Environment = \"dev\"\n  }\n}\n\n# Outputs\noutput \"policy_arns\" {\n  description = \"Map of policy names to ARNs\"\n  value       = module.iam_management.policy_arns\n}\n\noutput \"role_arns\" {\n  description = \"Map of role names to ARNs\"\n  value       = merge(\n    module.iam_management.role_arns,\n    module.github_actions_iam.role_arns\n  )\n}\n\noutput \"user_arns\" {\n  description = \"Map of user names to ARNs\"\n  value       = module.iam_management.user_arns\n}\n\noutput \"instance_profile_arns\" {\n  description = \"Map of instance profile names to ARNs\"\n  value       = module.iam_management.instance_profile_arns\n}\n\noutput \"access_keys\" {\n  description = \"Access key information\"\n  value       = {\n    for k, v in module.iam_management.iam_access_keys : k => {\n      id     = v.access_key_id\n      user   = v.user\n      status = v.status\n    }\n  }\n  sensitive = true\n}\n\noutput \"resource_summary\" {\n  description = \"Summary of created IAM resources\"\n  value       = module.iam_management.resource_summary\n}\n\noutput \"account_info\" {\n  description = \"Account information\"\n  value       = module.iam_management.account_info\n}"